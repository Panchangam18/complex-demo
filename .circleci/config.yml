version: 2.1

# Orbs for common functionality
orbs:
  docker: circleci/docker@2.2.0
  terraform: circleci/terraform@3.2.0
  kubernetes: circleci/kubernetes@1.3.1
  slack: circleci/slack@4.10.1

# Executors
executors:
  docker-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large
  
  node-executor:
    docker:
      - image: cimg/node:18.17
    resource_class: large
    
  terraform-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large

# Commands
commands:
  setup_aws_cli:
    description: "Setup AWS CLI with OIDC"
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

  setup_gcp_cli:
    description: "Setup GCP CLI"
    steps:
      - run:
          name: Install GCP CLI
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get install google-cloud-cli
            gcloud --version

  setup_terraform:
    description: "Setup Terraform and Terragrunt"
    steps:
      - run:
          name: Install Terraform and Terragrunt
          command: |
            # Install Terraform
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform
            
            # Install Terragrunt
            curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_amd64
            chmod +x terragrunt
            sudo mv terragrunt /usr/local/bin/
            
            terraform --version
            terragrunt --version

  jfrog_login:
    description: "Login to JFrog Artifactory"
    steps:
      - run:
          name: Login to JFrog Artifactory
          command: |
            echo "${ARTIFACTORY_TOKEN}" | docker login "${ARTIFACTORY_URL}" \
              --username "${ARTIFACTORY_USERNAME}" --password-stdin

  security_scan:
    description: "Run security scans on Docker images"
    parameters:
      image_url:
        type: string
    steps:
      - run:
          name: Install Trivy
          command: |
            sudo apt-get update
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
      - run:
          name: Scan Docker Image
          command: |
            trivy image --exit-code 1 --severity HIGH,CRITICAL << parameters.image_url >>

  publish_build_metadata:
    description: "Publish build metadata to Prometheus"
    parameters:
      job_name:
        type: string
      status:
        type: string
    steps:
      - run:
          name: Push build metrics to Prometheus
          command: |
            cat <<EOF > /tmp/metrics.txt
            build_info{job="<< parameters.job_name >>",status="<< parameters.status >>",branch="${CIRCLE_BRANCH}",build_number="${CIRCLE_BUILD_NUM}"} 1
            EOF
            
            curl -X POST "${PROMETHEUS_PUSHGATEWAY_URL}/metrics/job/<< parameters.job_name >>/instance/${CIRCLE_BUILD_NUM}" \
              --data-binary @/tmp/metrics.txt || echo "Prometheus push failed, continuing..."

# Jobs
jobs:
  # Application Build & Test Jobs
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd Code/client
            npm ci
      - run:
          name: Run tests
          command: |
            cd Code/client
            npm run lint
      - run:
          name: Build application
          command: |
            cd Code/client
            NODE_OPTIONS="--openssl-legacy-provider" npm run build
      - persist_to_workspace:
          root: .
          paths:
            - Code/client/dist
            - Code/client/Dockerfile
            - Code/client/nginx.conf

  build-backend:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd Code/server
            npm ci
      - run:
          name: Run tests (placeholder)
          command: |
            cd Code/server
            echo "Backend tests would run here"
      - persist_to_workspace:
          root: .
          paths:
            - Code/server/src
            - Code/server/package*.json
            - Code/server/Dockerfile

  # Security Scanning
  security-scan:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install security scanning tools
          command: |
            # Install Trivy
            sudo apt-get update
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
            
            # Install Semgrep
            python3 -m pip install semgrep
      - run:
          name: SAST scan with Semgrep
          command: |
            semgrep --config=auto --json --output=semgrep-results.json Code/ || true
      - run:
          name: Container scan (Dockerfile)
          command: |
            trivy fs --format json --output trivy-fs-results.json Code/
      - store_artifacts:
          path: semgrep-results.json
      - store_artifacts:
          path: trivy-fs-results.json

  # Image Build & Push
  build-and-push-images:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.14
      - jfrog_login
      - run:
          name: Build and push images
          command: |
            # Generate unique tag
            export IMAGE_TAG="${CIRCLE_SHA1:0:7}-${CIRCLE_BUILD_NUM}"
            
            # Build and push using existing script
            ./scripts/build-and-push.sh
            
            # Store image URLs for downstream jobs
            ARTIFACTORY_REGISTRY=$(echo "${ARTIFACTORY_URL}" | sed 's|https://||')
            echo "export FRONTEND_IMAGE_URL=\"${ARTIFACTORY_REGISTRY}/${ARTIFACTORY_DOCKER_REPO}/${FRONTEND_IMAGE_NAME:-dev-frontend}:${IMAGE_TAG}\"" >> $BASH_ENV
            echo "export BACKEND_IMAGE_URL=\"${ARTIFACTORY_REGISTRY}/${ARTIFACTORY_DOCKER_REPO}/${BACKEND_IMAGE_NAME:-dev-backend}:${IMAGE_TAG}\"" >> $BASH_ENV
      - security_scan:
          image_url: "${FRONTEND_IMAGE_URL}"
      - security_scan:
          image_url: "${BACKEND_IMAGE_URL}"
      - publish_build_metadata:
          job_name: "image-build"
          status: "success"

  # Infrastructure Jobs
  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - setup_terraform
      - run:
          name: Terraform fmt check
          command: |
            cd terraform
            terraform fmt -check -recursive
      - run:
          name: Terraform validate
          command: |
            cd terraform/envs/dev/us-east-2
            terraform init -backend=false
            terraform validate
      - run:
          name: Run tflint
          command: |
            # Install tflint
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            
            cd terraform
            tflint --recursive
      - run:
          name: Run Checkov
          command: |
            pip3 install checkov
            checkov -d terraform --framework terraform --output cli

  terraform-plan:
    executor: terraform-executor
    steps:
      - checkout
      - setup_terraform
      - setup_aws_cli
      - run:
          name: Terraform plan
          command: |
            cd terraform
            make plan ENV=dev REGION=us-east-2
      - store_artifacts:
          path: terraform/plan.out

  terraform-apply:
    executor: terraform-executor
    steps:
      - checkout
      - setup_terraform
      - setup_aws_cli
      - run:
          name: Terraform apply
          command: |
            cd terraform
            make apply ENV=dev REGION=us-east-2

  # GitOps Update
  update-gitops-manifests:
    executor: kubernetes
    steps:
      - checkout
      - run:
          name: Update K8s manifests with new image tags
          command: |
            # Use the generated image tag from build job
            export IMAGE_TAG="${CIRCLE_SHA1:0:7}-${CIRCLE_BUILD_NUM}"
            ./scripts/update-k8s-images.sh
      - run:
          name: Commit and push updated manifests
          command: |
            git config user.email "circleci@company.com"
            git config user.name "CircleCI"
            
            if git diff --quiet; then
              echo "No changes to commit"
              exit 0
            fi
            
            git add k8s/envs/dev/*/deployment.yaml
            git commit -m "feat: update image tags to ${CIRCLE_SHA1:0:7}-${CIRCLE_BUILD_NUM} [skip ci]"
            git push origin main

# Workflows
workflows:
  version: 2
  
  # Main CI/CD Pipeline
  ci-cd-pipeline:
    jobs:
      # Security and validation (run in parallel)
      - security-scan:
          filters:
            branches:
              ignore: 
                - /skip-.*/ 
      - terraform-validate:
          filters:
            branches:
              ignore: 
                - /skip-.*/
      
      # Application builds (run in parallel after security checks)
      - build-frontend:
          requires:
            - security-scan
      - build-backend:
          requires:
            - security-scan
      
      # Infrastructure planning
      - terraform-plan:
          requires:
            - terraform-validate
          filters:
            branches:
              only: 
                - main
                - develop
      
      # Build and push images (after app builds complete)
      - build-and-push-images:
          requires:
            - build-frontend
            - build-backend
          context:
            - jfrog-context
            - prometheus-context
      
      # Infrastructure deployment (manual approval for prod)
      - hold-for-approval:
          type: approval
          requires:
            - terraform-plan
          filters:
            branches:
              only: main
      
      - terraform-apply:
          requires:
            - hold-for-approval
          context:
            - aws-context
            - gcp-context
          filters:
            branches:
              only: main
      
      # GitOps manifest update
      - update-gitops-manifests:
          requires:
            - build-and-push-images
          context:
            - github-context
          filters:
            branches:
              only: main

  # Nightly builds and maintenance
  nightly-maintenance:
    triggers:
      - schedule:
          cron: "0 2 * * *" # 2 AM UTC daily
          filters:
            branches:
              only: main
    jobs:
      - security-scan
      - terraform-validate 