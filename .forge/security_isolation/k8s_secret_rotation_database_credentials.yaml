goal: Automatically rotate database passwords stored in Kubernetes secrets without
  service disruption
steps:
- name: List database credential secrets
  type: integration
  integration: kubernetes
  method: CoreV1Api.list_secret_for_all_namespaces
  parameters:
    label_selector: type=database-credentials
    limit: 500
- name: Read secret details
  type: integration
  integration: kubernetes
  method: CoreV1Api.read_namespaced_secret
  parameters:
    name: ${SECRET_NAME}
    namespace: ${NAMESPACE}
- name: Extract database connection info
  type: prompt
  prompt: Extract database connection details from secrets including host, port, username,
    and current password. Identify the database type (RDS, PostgreSQL, MySQL).
- name: Test current credentials
  type: cli
  command: kubectl run db-test-${RANDOM} --rm -i --restart=Never --namespace=${NAMESPACE}
    --image=postgres:14 -- psql "postgresql://${USERNAME}:${PASSWORD}@${HOST}:${PORT}/${DATABASE}"
    -c 'SELECT version()' || echo 'Connection test failed'
- name: Generate new secure passwords
  type: prompt
  prompt: 'Generate cryptographically secure passwords meeting requirements: 20+ characters,
    uppercase, lowercase, numbers, special characters from !@#$%^&*'
- name: Update RDS password
  type: integration
  integration: aws
  method: rds.ModifyDBInstance
  parameters:
    DBInstanceIdentifier: ${DB_INSTANCE_ID}
    MasterUserPassword: ${NEW_PASSWORD}
    ApplyImmediately: true
- name: Find deployments using the secret
  type: integration
  integration: kubernetes
  method: AppsV1Api.list_deployment_for_all_namespaces
  parameters:
    limit: 500
- name: Identify affected deployments
  type: prompt
  prompt: Find all deployments that reference the database secrets either through
    env valueFrom.secretKeyRef or envFrom.secretRef.
- name: Create new secret with updated password
  type: integration
  integration: kubernetes
  method: CoreV1Api.create_namespaced_secret
  parameters:
    namespace: ${NAMESPACE}
    body:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${SECRET_NAME}-rotated
        labels:
          type: database-credentials
          rotation-date: ${DATE}
          original-secret: ${SECRET_NAME}
      type: Opaque
      data:
        username: ${USERNAME_BASE64}
        password: ${NEW_PASSWORD_BASE64}
        host: ${HOST_BASE64}
        port: ${PORT_BASE64}
        database: ${DATABASE_BASE64}
- name: Update deployment to use new secret
  type: integration
  integration: kubernetes
  method: AppsV1Api.patch_namespaced_deployment
  parameters:
    name: ${DEPLOYMENT_NAME}
    namespace: ${NAMESPACE}
    body:
      spec:
        template:
          spec:
            containers:
            - name: ${CONTAINER_NAME}
              env:
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${SECRET_NAME}-rotated
                    key: password
- name: Trigger rolling update
  type: cli
  command: kubectl rollout restart deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} &&
    kubectl rollout status deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} --timeout=300s
- name: Monitor application logs for errors
  type: cli
  command: kubectl logs -n ${NAMESPACE} -l app=${APP_LABEL} --since=5m --prefix=true
    | grep -i -E 'auth|password|credential|denied|failed' || echo 'No authentication
    errors found'
- name: Check database connection metrics
  type: integration
  integration: datadog
  method: MetricsApi.query_timeseries_data
  parameters:
    body:
      data:
        type: timeseries_request
        attributes:
          formulas:
          - formula: query1
          queries:
          - name: query1
            data_source: metrics
            query: sum:database.connection.errors{service:${SERVICE_NAME}} by {status}.as_rate()
          from: now-10m
          to: now
- name: Validate rotation success
  type: prompt
  prompt: Analyze logs and metrics to confirm successful password rotation. If error
    rate > 1%, prepare rollback plan.
- name: Clean up old secret
  type: integration
  integration: kubernetes
  method: CoreV1Api.delete_namespaced_secret
  parameters:
    name: ${OLD_SECRET_NAME}
    namespace: ${NAMESPACE}
- name: Record rotation audit event
  type: integration
  integration: kubernetes
  method: CoreV1Api.create_namespaced_event
  parameters:
    namespace: ${NAMESPACE}
    body:
      metadata:
        name: secret-rotation-${TIMESTAMP}
      involvedObject:
        kind: Secret
        name: ${SECRET_NAME}
        namespace: ${NAMESPACE}
      reason: SecretRotated
      message: Database credentials rotated successfully
      type: Normal
      reportingComponent: secret-rotation-controller

