goal: Create and validate secure Docker configurations
steps:
- name: Create Dockerfile
  type: cli
  command: "cat > /tmp/Dockerfile << 'EOF'\n# Use specific version instead of latest\n\
    FROM node:18.17.0-alpine AS builder\n\n# Create non-root user\nRUN addgroup -g\
    \ 1001 -S nodejs && adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR\
    \ /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\
    \ with exact versions\nRUN npm ci --only=production && npm cache clean --force\n\
    \n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Production stage\n\
    FROM node:18.17.0-alpine\n\n# Install security updates\nRUN apk update && apk\
    \ upgrade && apk add --no-cache dumb-init\n\n# Create non-root user\nRUN addgroup\
    \ -g 1001 -S nodejs && adduser -S nodejs -u 1001\n\nWORKDIR /app\n\n# Copy from\
    \ builder\nCOPY --from=builder --chown=nodejs:nodejs /app .\n\n# Use non-root\
    \ user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK\
    \ --interval=30s --timeout=3s --start-period=40s --retries=3 \\\n  CMD node healthcheck.js\n\
    \n# Use dumb-init to handle signals\nENTRYPOINT [\"dumb-init\", \"--\"]\n\n# Start\
    \ application\nCMD [\"node\", \"server.js\"]\nEOF"
- name: Create .dockerignore
  type: cli
  command: 'cat > /tmp/.dockerignore << ''EOF''

    # Dependencies

    node_modules/

    npm-debug.log

    yarn-error.log


    # Environment files

    .env

    .env.*

    !.env.example


    # IDE

    .vscode/

    .idea/

    *.swp

    *.swo


    # OS

    .DS_Store

    Thumbs.db


    # Tests

    coverage/

    .nyc_output/


    # Build artifacts

    dist/

    build/

    *.log


    # Git

    .git/

    .gitignore


    # Documentation

    *.md

    docs/


    # CI/CD

    .gitlab-ci.yml

    .github/

    Jenkinsfile

    EOF'
- name: Validate Dockerfile syntax
  type: cli
  command: hadolint /tmp/Dockerfile --format json > /tmp/hadolint_results.json ||
    true
- name: Create docker-compose.yml
  type: cli
  command: "cat > /tmp/docker-compose.yml << 'EOF'\nversion: '3.8'\n\nservices:\n\
    \  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image:\
    \ myapp:latest\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\
    \n    environment:\n      NODE_ENV: production\n      LOG_LEVEL: info\n    volumes:\n\
    \      - type: tmpfs\n        target: /tmp\n        tmpfs:\n          size: 100M\n\
    \    security_opt:\n      - no-new-privileges:true\n    cap_drop:\n      - ALL\n\
    \    cap_add:\n      - NET_BIND_SERVICE\n    read_only: true\n    networks:\n\
    \      - app-network\n    deploy:\n      resources:\n        limits:\n       \
    \   cpus: '0.5'\n          memory: 512M\n        reservations:\n          cpus:\
    \ '0.25'\n          memory: 256M\n\nnetworks:\n  app-network:\n    driver: bridge\n\
    \    ipam:\n      config:\n        - subnet: 172.20.0.0/16\nEOF"
- name: Validate docker-compose syntax
  type: cli
  command: docker-compose -f /tmp/docker-compose.yml config > /tmp/compose_validation.yml
    || true
- name: Run Trivy configuration scan
  type: cli
  command: 'trivy config /tmp --format json > /tmp/trivy_config_scan.json || echo
    ''{"Results": [{"Misconfigurations": []}]}'' > /tmp/trivy_config_scan.json'
- name: Check for security best practices
  type: cli
  command: "python3 << 'EOF'\nimport json\n\n# Check Dockerfile best practices\nissues\
    \ = []\n\nwith open('/tmp/Dockerfile', 'r') as f:\n    dockerfile_content = f.read()\n\
    \n# Security checks\nif 'USER root' in dockerfile_content:\n    issues.append('Running\
    \ as root user detected')\n\nif ':latest' in dockerfile_content:\n    issues.append('Using\
    \ :latest tag - specify exact versions')\n\nif 'sudo' in dockerfile_content:\n\
    \    issues.append('sudo usage detected - avoid in containers')\n\nif '--no-cache'\
    \ not in dockerfile_content:\n    issues.append('Consider using --no-cache for\
    \ apk add')\n\nif 'HEALTHCHECK' not in dockerfile_content:\n    issues.append('No\
    \ HEALTHCHECK defined')\n\n# Check docker-compose\nwith open('/tmp/docker-compose.yml',\
    \ 'r') as f:\n    compose_content = f.read()\n\nif 'privileged: true' in compose_content:\n\
    \    issues.append('Privileged mode enabled - security risk')\n\nif 'cap_drop:'\
    \ not in compose_content:\n    issues.append('No capabilities dropped')\n\nif\
    \ 'security_opt:' not in compose_content:\n    issues.append('No security options\
    \ configured')\n\nresult = {\n    'total_issues': len(issues),\n    'severity':\
    \ 'high' if len(issues) > 3 else 'medium' if len(issues) > 0 else 'low',\n   \
    \ 'issues': issues,\n    'passed': len(issues) == 0\n}\n\nwith open('/tmp/security_check_results.json',\
    \ 'w') as f:\n    json.dump(result, f, indent=2)\nEOF"
- name: Verify Docker security
  type: prompt
  prompt: Review the Dockerfile, docker-compose configuration, and security scan results.
    Ensure containers follow security best practices including non-root users, minimal
    capabilities, and proper isolation.

