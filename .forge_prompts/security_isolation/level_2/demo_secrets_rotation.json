{
  "goal": "Automate secrets rotation with zero downtime",
  "steps": [
    {
      "name": "List secrets nearing expiration",
      "type": "integration",
      "integration": "aws",
      "method": "client('secretsmanager').list_secrets",
      "parameters": {
        "Filters": [
          {
            "Key": "tag-key",
            "Values": ["RotationEnabled"]
          }
        ]
      },
      "files": []
    },
    {
      "name": "Get secret metadata",
      "type": "integration",
      "integration": "aws",
      "method": "client('secretsmanager').describe_secret",
      "parameters": {
        "SecretId": "${SECRET_ARN}"
      },
      "files": []
    },
    {
      "name": "Generate new credentials",
      "type": "cli",
      "command": "openssl rand -base64 32 > /tmp/new_password.txt && openssl genrsa -out /tmp/new_key.pem 4096 && openssl req -new -x509 -key /tmp/new_key.pem -out /tmp/new_cert.pem -days 365 -subj '/CN=service.example.com'",
      "files": ["/tmp/new_password.txt", "/tmp/new_key.pem", "/tmp/new_cert.pem"]
    },
    {
      "name": "Create new secret version",
      "type": "integration",
      "integration": "aws",
      "method": "client('secretsmanager').put_secret_value",
      "parameters": {
        "SecretId": "${SECRET_ARN}",
        "SecretString": {
          "username": "${USERNAME}",
          "password": "${NEW_PASSWORD}",
          "private_key": "${NEW_PRIVATE_KEY}",
          "certificate": "${NEW_CERTIFICATE}"
        },
        "VersionStages": ["AWSPENDING"]
      },
      "files": []
    },
    {
      "name": "Update database credentials",
      "type": "cli",
      "command": "mysql -h ${DB_HOST} -u admin -p${OLD_PASSWORD} -e \"ALTER USER '${APP_USER}'@'%' IDENTIFIED BY '${NEW_PASSWORD}'; FLUSH PRIVILEGES;\" > /tmp/db_rotation.log",
      "files": ["/tmp/db_rotation.log"]
    },
    {
      "name": "Deploy new secret to Kubernetes",
      "type": "cli",
      "command": "kubectl create secret generic app-credentials --from-file=password=/tmp/new_password.txt --from-file=tls.key=/tmp/new_key.pem --from-file=tls.crt=/tmp/new_cert.pem --dry-run=client -o yaml | kubectl apply -f - -n production",
      "files": []
    },
    {
      "name": "Trigger rolling update",
      "type": "cli",
      "command": "kubectl patch deployment app-deployment -n production -p '{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"secret-rotation\":\"'$(date +%s)'\"}}}}}'",
      "files": []
    },
    {
      "name": "Finalize rotation",
      "type": "integration",
      "integration": "aws",
      "method": "client('secretsmanager').update_secret_version_stage",
      "parameters": {
        "SecretId": "${SECRET_ARN}",
        "VersionStage": "AWSCURRENT",
        "MoveToVersionId": "${NEW_VERSION_ID}",
        "RemoveFromVersionId": "${OLD_VERSION_ID}"
      },
      "files": []
    },
    {
      "name": "Verify rotation success",
      "type": "prompt",
      "prompt": "Verify that all services are using the new credentials, check application logs for authentication errors, and create a rotation audit report. Ensure the old credentials are properly deprecated.",
      "files": ["/tmp/new_password.txt", "/tmp/db_rotation.log"]
    }
  ]
}