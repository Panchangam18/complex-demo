{
  "workflow_name": "intelligent_deployment_rollback_automation",
  "description": "Automatically detect deployment issues and orchestrate intelligent rollbacks with minimal service disruption",
  "goal": "Ensure zero-downtime deployments with automatic rollback capabilities based on real-time health signals",
  "trigger": {
    "type": "event",
    "source": "aws.codedeploy.DeploymentStateChange",
    "additional_triggers": ["datadog:AnomalyDetected", "pagerduty:IncidentTriggered"]
  },
  "inputs": {
    "deployment_id": "${event.deploymentId}",
    "service_name": "${event.serviceName}",
    "deployment_group": "${event.deploymentGroup}",
    "anomaly_details": "${event.anomalyDetails}"
  },
  "steps": [
    {
      "step": 1,
      "action": "capture_deployment_state",
      "integration": "aws.codedeploy.GetDeployment",
      "parameters": {
        "deploymentId": "${inputs.deployment_id}"
      },
      "output": "deployment_info"
    },
    {
      "step": 2,
      "action": "establish_health_baseline",
      "integration": "datadog.MetricsApi.query_timeseries_data",
      "parameters": {
        "query": "avg:service.health_score{service:${inputs.service_name}}, avg:aws.applicationelb.target_response_time{service:${inputs.service_name}}, sum:service.error_rate{service:${inputs.service_name}}",
        "from": "${deployment_info.createTime - 3600}",
        "to": "${deployment_info.createTime}"
      },
      "output": "pre_deployment_baseline"
    },
    {
      "step": 3,
      "action": "monitor_deployment_progress",
      "integration": "aws.cloudwatch.GetMetricData",
      "parameters": {
        "MetricDataQueries": [
          {
            "Id": "deployment_success_rate",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/CodeDeploy",
                "MetricName": "Deployments",
                "Dimensions": [{"Name": "DeploymentGroupName", "Value": "${inputs.deployment_group}"}]
              },
              "Period": 60,
              "Stat": "Average"
            }
          },
          {
            "Id": "instance_health",
            "Expression": "SEARCH(' {AWS/EC2,InstanceId} MetricName=\"StatusCheckFailed_Instance\" ', 'Average', 60)"
          }
        ],
        "StartTime": "${deployment_info.createTime}",
        "EndTime": "${now()}"
      },
      "output": "deployment_metrics"
    },
    {
      "step": 4,
      "action": "analyze_application_health",
      "integration": "datadog.LogsApi.list_logs",
      "parameters": {
        "filter_query": "service:${inputs.service_name} AND (level:error OR level:critical)",
        "filter_from": "${deployment_info.createTime}",
        "filter_to": "${now()}",
        "sort": "timestamp",
        "limit": 1000
      },
      "transform": {
        "error_rate": "count / time_window_seconds",
        "error_patterns": "groupByPattern(logs.message)"
      },
      "output": "application_logs"
    },
    {
      "step": 5,
      "action": "detect_regression_patterns",
      "integration": "aws.sagemaker.InvokeEndpoint",
      "parameters": {
        "EndpointName": "deployment-regression-detector",
        "Body": {
          "baseline_metrics": "${pre_deployment_baseline}",
          "current_metrics": "${deployment_metrics}",
          "error_logs": "${application_logs}",
          "deployment_metadata": "${deployment_info}",
          "sensitivity_config": {
            "latency_threshold": 1.2,
            "error_rate_threshold": 1.5,
            "availability_threshold": 0.99
          }
        }
      },
      "output": "regression_analysis"
    },
    {
      "step": 6,
      "action": "evaluate_business_impact",
      "integration": "aws.lambda.Invoke",
      "parameters": {
        "FunctionName": "business-impact-analyzer",
        "Payload": {
          "service": "${inputs.service_name}",
          "regression_data": "${regression_analysis}",
          "real_time_metrics": {
            "transaction_volume": "${getTransactionVolume()}",
            "revenue_impact": "${getRevenueMetrics()}",
            "user_experience_score": "${getUserExperienceScore()}"
          }
        }
      },
      "output": "business_impact"
    },
    {
      "step": 7,
      "action": "determine_rollback_strategy",
      "integration": "aws.dynamodb.GetItem",
      "parameters": {
        "TableName": "deployment-strategies",
        "Key": {
          "service_name": "${inputs.service_name}",
          "deployment_type": "${deployment_info.deploymentConfigName}"
        }
      },
      "followed_by": {
        "action": "calculate_optimal_strategy",
        "integration": "aws.lambda.Invoke",
        "parameters": {
          "FunctionName": "rollback-strategy-optimizer",
          "Payload": {
            "service_config": "${result.Item}",
            "regression_severity": "${regression_analysis.severity}",
            "business_impact": "${business_impact}",
            "current_traffic": "${getCurrentTrafficLoad()}"
          }
        }
      },
      "output": "rollback_strategy"
    },
    {
      "step": 8,
      "action": "initiate_traffic_shifting",
      "integration": "aws.elasticloadbalancingv2.ModifyRule",
      "condition": "${rollback_strategy.type === 'gradual'}",
      "parameters": {
        "RuleArn": "${rollback_strategy.alb_rule_arn}",
        "Actions": [{
          "Type": "forward",
          "ForwardConfig": {
            "TargetGroups": [
              {
                "TargetGroupArn": "${rollback_strategy.blue_target_group}",
                "Weight": "${rollback_strategy.blue_weight}"
              },
              {
                "TargetGroupArn": "${rollback_strategy.green_target_group}",
                "Weight": "${rollback_strategy.green_weight}"
              }
            ]
          }
        }]
      },
      "output": "traffic_shift_result"
    },
    {
      "step": 9,
      "action": "execute_rollback_procedure",
      "integration": "aws.codedeploy.StopDeployment",
      "condition": "${regression_analysis.requires_rollback}",
      "parameters": {
        "deploymentId": "${inputs.deployment_id}",
        "autoRollbackEnabled": true
      },
      "followed_by": {
        "action": "trigger_rollback_deployment",
        "integration": "aws.codedeploy.CreateDeployment",
        "parameters": {
          "applicationName": "${deployment_info.applicationName}",
          "deploymentGroupName": "${inputs.deployment_group}",
          "revision": {
            "revisionType": "S3",
            "s3Location": "${deployment_info.previousRevision.s3Location}"
          },
          "deploymentConfigName": "CodeDeployDefault.AllAtOnceBlueGreen",
          "description": "Automated rollback due to regression detection"
        }
      },
      "output": "rollback_deployment"
    },
    {
      "step": 10,
      "action": "preserve_diagnostic_data",
      "integration": "aws.s3.PutObject",
      "parameters": {
        "Bucket": "deployment-diagnostics",
        "Key": "rollbacks/${inputs.deployment_id}/diagnostic-bundle.json",
        "Body": {
          "deployment_info": "${deployment_info}",
          "regression_analysis": "${regression_analysis}",
          "application_logs": "${application_logs}",
          "metrics_snapshot": "${deployment_metrics}",
          "rollback_decision": "${rollback_strategy}",
          "timestamp": "${now()}"
        }
      },
      "output": "diagnostic_bundle"
    },
    {
      "step": 11,
      "action": "update_feature_flags",
      "integration": "launchdarkly.FeatureFlagsApi.patch_feature_flag",
      "condition": "${rollback_strategy.disable_features}",
      "for_each": "${rollback_strategy.features_to_disable}",
      "parameters": {
        "project_key": "${config.project_key}",
        "feature_flag_key": "${feature.key}",
        "patch_comment": "Automated rollback - disabling feature due to deployment regression",
        "patch": [{
          "op": "replace",
          "path": "/environments/${config.environment}/on",
          "value": false
        }]
      },
      "output": "feature_flag_updates"
    },
    {
      "step": 12,
      "action": "notify_stakeholders",
      "integration": "slack.WebhookClient.send",
      "parameters": {
        "webhook_url": "${secrets.slack_deployment_webhook}",
        "blocks": [{
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "ðŸš¨ Deployment Rollback Initiated"
          }
        }, {
          "type": "section",
          "fields": [
            {"type": "mrkdwn", "text": "*Service:* ${inputs.service_name}"},
            {"type": "mrkdwn", "text": "*Deployment ID:* ${inputs.deployment_id}"},
            {"type": "mrkdwn", "text": "*Reason:* ${regression_analysis.primary_reason}"},
            {"type": "mrkdwn", "text": "*Impact:* ${business_impact.severity}"}
          ]
        }, {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "*Metrics:*\nâ€¢ Error Rate: ${regression_analysis.error_rate_increase}%\nâ€¢ Latency: +${regression_analysis.latency_increase}ms\nâ€¢ Success Rate: ${regression_analysis.success_rate}%"
          }
        }]
      },
      "output": "stakeholder_notification"
    },
    {
      "step": 13,
      "action": "monitor_rollback_health",
      "integration": "datadog.MetricsApi.query_timeseries_data",
      "parameters": {
        "query": "avg:service.health_score{service:${inputs.service_name}}",
        "from": "${rollback_deployment.createTime}",
        "to": "${now()}"
      },
      "retry": {
        "max_attempts": 20,
        "interval": 30,
        "until": "health_score >= pre_deployment_baseline.health_score * 0.95"
      },
      "output": "rollback_health_metrics"
    },
    {
      "step": 14,
      "action": "create_incident_report",
      "integration": "confluence.ContentApi.create_content",
      "parameters": {
        "type": "page",
        "title": "Deployment Rollback Report - ${inputs.service_name} - ${now()}",
        "space": {
          "key": "INCIDENTS"
        },
        "body": {
          "storage": {
            "value": "<h2>Deployment Rollback Summary</h2><p>Service: ${inputs.service_name}</p><p>Deployment ID: ${inputs.deployment_id}</p><h3>Regression Analysis</h3><pre>${JSON.stringify(regression_analysis, null, 2)}</pre><h3>Business Impact</h3><pre>${JSON.stringify(business_impact, null, 2)}</pre><h3>Rollback Strategy</h3><pre>${JSON.stringify(rollback_strategy, null, 2)}</pre><h3>Lessons Learned</h3><p>${generateLessonsLearned()}</p>",
            "representation": "storage"
          }
        }
      },
      "output": "incident_report"
    },
    {
      "step": 15,
      "action": "update_deployment_confidence",
      "integration": "aws.dynamodb.UpdateItem",
      "parameters": {
        "TableName": "deployment-confidence-scores",
        "Key": {
          "service_name": "${inputs.service_name}",
          "timestamp": "${now()}"
        },
        "UpdateExpression": "SET confidence_score = :score, rollback_count = rollback_count + :inc, last_rollback = :timestamp, regression_patterns = list_append(regression_patterns, :pattern)",
        "ExpressionAttributeValues": {
          ":score": "${calculateNewConfidenceScore()}",
          ":inc": 1,
          ":timestamp": "${now()}",
          ":pattern": [{
            "type": "${regression_analysis.pattern_type}",
            "metrics": "${regression_analysis.key_metrics}",
            "timestamp": "${now()}"
          }]
        }
      },
      "output": "confidence_update"
    }
  ],
  "error_handling": {
    "strategy": "fail_safe",
    "manual_intervention_threshold": 3,
    "escalation_path": ["on-call-engineer", "engineering-manager", "cto"],
    "preserve_service_availability": true
  },
  "outputs": {
    "rollback_executed": "${rollback_deployment != null}",
    "service_health_restored": "${rollback_health_metrics.health_score >= pre_deployment_baseline.health_score * 0.95}",
    "incident_report_url": "${incident_report.url}",
    "lessons_learned": "${generateLessonsLearned()}",
    "confidence_score": "${confidence_update.Attributes.confidence_score}"
  }
}