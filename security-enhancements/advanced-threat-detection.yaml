# Advanced Threat Detection Pipeline
# For multi-cloud environments (AWS, GCP, Azure)
# Compatible with existing monitoring stack (Prometheus, Elasticsearch, Datadog, New Relic)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: advanced-threat-detection-config
  namespace: security
  labels:
    app: security-platform
    component: threat-detection
    tier: security
data:
  config.yaml: |
    global:
      environment: production
      log_level: info
      retention_days: 90
      alert_threshold: medium
      enable_ml: true
      enable_realtime_response: true
      
    # 1. Behavioral Analytics & Anomaly Detection
    behavioral_analytics:
      enabled: true
      baseline_learning_period_days: 30
      anomaly_detection:
        algorithms:
          - isolation_forest
          - dbscan
          - lstm_timeseries
        sensitivity: medium
        monitored_entities:
          - user_accounts
          - service_accounts
          - api_keys
          - compute_resources
          - network_traffic
      user_behavior_analytics:
        enabled: true
        features:
          - login_patterns
          - resource_access
          - command_execution
          - data_access_volume
        baselines:
          update_frequency: daily
          confidence_threshold: 0.85
      cloud_activity_baselines:
        aws:
          cloudtrail_analysis: true
          guardduty_integration: true
          detective_integration: true
        gcp:
          cloud_audit_logs_analysis: true
          security_command_center_integration: true
        azure:
          activity_logs_analysis: true
          sentinel_integration: true
      
    # 2. ML-based Threat Hunting
    threat_hunting:
      enabled: true
      scheduled_hunts:
        - name: privileged_access_abuse
          frequency: daily
          description: "Detect privilege escalation and abuse patterns"
          ml_models:
            - type: supervised_classification
              name: privilege_escalation_detector
              training_data: "s3://security-ml-models/privilege-escalation/training"
              features:
                - user_role_changes
                - unusual_permission_grants
                - sensitive_resource_access
        - name: lateral_movement
          frequency: daily
          description: "Detect lateral movement techniques"
          ml_models:
            - type: graph_analysis
              name: lateral_movement_detector
              training_data: "s3://security-ml-models/lateral-movement/training"
              features:
                - authentication_patterns
                - network_connections
                - resource_access_sequence
        - name: data_exfiltration
          frequency: hourly
          description: "Detect potential data exfiltration"
          ml_models:
            - type: anomaly_detection
              name: data_exfiltration_detector
              training_data: "s3://security-ml-models/data-exfiltration/training"
              features:
                - data_volume_baseline
                - unusual_destinations
                - sensitive_data_access
      custom_hunts:
        enabled: true
        repository: "git@github.com:company/threat-hunting-playbooks.git"
        auto_update: true
      threat_hunting_dashboard:
        grafana_integration: true
        dashboard_id: "threat-hunting-overview"
        refresh_interval: 3600
      
    # 3. Threat Intelligence Integration
    threat_intelligence:
      enabled: true
      sources:
        - name: misp
          type: open_source
          url: "https://misp.company.internal"
          api_key_secret: "secret/misp/api"
          polling_interval: 3600
          confidence_threshold: 70
        - name: virustotal
          type: commercial
          url: "https://www.virustotal.com/vtapi/v2"
          api_key_secret: "secret/virustotal/api"
          polling_interval: 7200
          confidence_threshold: 80
        - name: mandiant
          type: commercial
          url: "https://api.intelligence.mandiant.com"
          api_key_secret: "secret/mandiant/api"
          polling_interval: 14400
          confidence_threshold: 85
        - name: crowdstrike
          type: commercial
          url: "https://api.crowdstrike.com/intel"
          api_key_secret: "secret/crowdstrike/api"
          polling_interval: 3600
          confidence_threshold: 85
      ioc_types:
        - ip_address
        - domain
        - url
        - file_hash
        - email_address
        - user_agent
      enrichment:
        enabled: true
        sources:
          - greynoise
          - alienvault_otx
          - recorded_future
      automated_blocking:
        enabled: true
        confidence_threshold: 90
        block_duration_hours: 24
        notification_channel: "#security-blocks"
      
    # 4. Real-time Response Automation
    realtime_response:
      enabled: true
      automation_engine: "forge"
      workflows_repository: ".forge"
      incident_classification:
        low:
          auto_remediate: true
          notification: email
        medium:
          auto_remediate: true
          notification: slack
        high:
          auto_remediate: false
          notification: pagerduty
        critical:
          auto_remediate: false
          notification: pagerduty
      automated_actions:
        - trigger: "malware_detected"
          action: "isolate_instance"
          approval_required: false
          playbook: "security-incident-response.yaml"
        - trigger: "credential_compromise"
          action: "reset_credentials"
          approval_required: false
          playbook: "security-incident-response.yaml"
        - trigger: "data_exfiltration"
          action: "block_traffic"
          approval_required: true
          playbook: "security-incident-response.yaml"
        - trigger: "privilege_escalation"
          action: "revoke_permissions"
          approval_required: false
          playbook: "security-incident-response.yaml"
      notification_channels:
        slack:
          webhook_url_secret: "secret/slack/security-webhook"
          default_channel: "#security-alerts"
        email:
          smtp_server: "smtp.company.internal"
          from_address: "security-alerts@company.com"
          to_address: "security-team@company.com"
        pagerduty:
          integration_key_secret: "secret/pagerduty/security-incidents"
          service_id: "PXXXXX"
      
    # 5. Multi-cloud Threat Correlation
    multicloud_correlation:
      enabled: true
      central_siem: "elasticsearch"
      correlation_window_minutes: 60
      cross_cloud_correlation:
        enabled: true
        correlation_rules:
          - name: "cross_cloud_lateral_movement"
            description: "Detect lateral movement across cloud boundaries"
            rule: |
              aws_successful_login AND
              gcp_api_call AND
              same_username AND
              time_window < 30m
          - name: "distributed_data_exfiltration"
            description: "Detect data exfiltration across multiple clouds"
            rule: |
              (aws_s3_large_download OR gcp_gcs_large_download OR azure_blob_large_download) AND
              unusual_egress_traffic AND
              unusual_destination AND
              time_window < 60m
      unified_timeline:
        enabled: true
        data_sources:
          - aws_cloudtrail
          - aws_guardduty
          - gcp_cloud_audit_logs
          - gcp_security_command_center
          - azure_activity_logs
          - azure_sentinel
          - kubernetes_audit_logs
      entity_resolution:
        enabled: true
        entity_types:
          - user
          - service_account
          - instance
          - container
          - ip_address
        resolution_confidence_threshold: 0.85
      
    # 6. Container and Kubernetes Security
    container_security:
      enabled: true
      runtime_security:
        enabled: true
        engine: "falco"
        custom_rules_configmap: "falco-custom-rules"
        alert_severity_threshold: "warning"
      image_scanning:
        enabled: true
        scanner: "trivy"
        scan_frequency: "daily"
        fail_on_severity: "high"
        registries:
          - name: "artifactory"
            url: "company-artifactory.jfrog.io"
            credentials_secret: "artifactory-creds"
      kubernetes_security:
        enabled: true
        admission_controller: "opa_gatekeeper"
        policies_repository: "git@github.com:company/k8s-security-policies.git"
        audit_logging:
          enabled: true
          log_level: "RequestResponse"
        rbac_monitoring:
          enabled: true
          alert_on_wildcards: true
          alert_on_cluster_admin_grants: true
        network_policy_enforcement:
          enabled: true
          default_deny: true
        pod_security_standards:
          level: "restricted"
      cluster_security_posture:
        enabled: true
        benchmark: "cis_k8s"
        scan_frequency: "weekly"
        remediation_enabled: true
      
    # 7. Supply Chain Security Monitoring
    supply_chain_security:
      enabled: true
      artifact_integrity:
        enabled: true
        signature_verification: true
        sbom_validation: true
      dependency_scanning:
        enabled: true
        scan_frequency: "daily"
        vulnerability_threshold: "high"
        ecosystems:
          - npm
          - maven
          - pypi
          - golang
      ci_cd_security:
        enabled: true
        pipeline_integrity_checks: true
        secure_build_environments: true
        signing_enforcement: true
      infrastructure_as_code_scanning:
        enabled: true
        scanners:
          - checkov
          - tfsec
          - kics
        scan_frequency: "on_commit"
        fail_on_severity: "high"
      artifact_provenance:
        enabled: true
        attestation_required: true
        verification_on_deployment: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: advanced-threat-detection
  namespace: security
  labels:
    app: security-platform
    component: threat-detection
spec:
  replicas: 3
  selector:
    matchLabels:
      app: security-platform
      component: threat-detection
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: security-platform
        component: threat-detection
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: threat-detection-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: threat-detection-engine
          image: company-artifactory.jfrog.io/security/threat-detection:1.5.0
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9090
              name: metrics
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
          env:
            - name: ELASTICSEARCH_URL
              valueFrom:
                configMapKeyRef:
                  name: monitoring-config
                  key: elasticsearch_url
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: monitoring-config
                  key: kafka_bootstrap_servers
            - name: VAULT_ADDR
              valueFrom:
                configMapKeyRef:
                  name: monitoring-config
                  key: vault_addr
            - name: CONFIG_PATH
              value: "/etc/threat-detection/config.yaml"
            - name: LOG_LEVEL
              value: "info"
            - name: ENABLE_ML
              value: "true"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: config-volume
              mountPath: /etc/threat-detection
              readOnly: true
            - name: ml-models
              mountPath: /opt/threat-detection/models
              readOnly: true
            - name: temp-data
              mountPath: /tmp
        - name: falco-agent
          image: falcosecurity/falco:0.33.0
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          volumeMounts:
            - name: falco-config
              mountPath: /etc/falco
              readOnly: true
            - name: docker-socket
              mountPath: /var/run/docker.sock
              readOnly: true
            - name: host-fs
              mountPath: /host
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: advanced-threat-detection-config
        - name: ml-models
          persistentVolumeClaim:
            claimName: ml-models-pvc
        - name: temp-data
          emptyDir: {}
        - name: falco-config
          configMap:
            name: falco-config
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: host-fs
          hostPath:
            path: /

---
apiVersion: v1
kind: Service
metadata:
  name: threat-detection-service
  namespace: security
  labels:
    app: security-platform
    component: threat-detection
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: metrics
  selector:
    app: security-platform
    component: threat-detection

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: threat-detection-role
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "namespaces", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["auditregistration.k8s.io"]
    resources: ["auditsinks"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: threat-detection-binding
subjects:
  - kind: ServiceAccount
    name: threat-detection-sa
    namespace: security
roleRef:
  kind: ClusterRole
  name: threat-detection-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: threat-detection-sa
  namespace: security

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: threat-detection-monitor
  namespace: monitoring
  labels:
    release: prometheus-operator
spec:
  selector:
    matchLabels:
      app: security-platform
      component: threat-detection
  namespaceSelector:
    matchNames:
      - security
  endpoints:
    - port: metrics
      interval: 15s
      path: /metrics

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-models-pvc
  namespace: security
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: ssd

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: threat-intelligence-updater
  namespace: security
spec:
  schedule: "0 */4 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: threat-detection-sa
          containers:
            - name: threat-intel-updater
              image: company-artifactory.jfrog.io/security/threat-intel-updater:1.2.0
              imagePullPolicy: Always
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
              env:
                - name: CONFIG_PATH
                  value: "/etc/threat-detection/config.yaml"
                - name: VAULT_ADDR
                  valueFrom:
                    configMapKeyRef:
                      name: monitoring-config
                      key: vault_addr
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/threat-detection
                  readOnly: true
          volumes:
            - name: config-volume
              configMap:
                name: advanced-threat-detection-config
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ml-model-trainer
  namespace: security
spec:
  schedule: "0 0 * * 0"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: threat-detection-sa
          containers:
            - name: ml-trainer
              image: company-artifactory.jfrog.io/security/ml-trainer:1.3.0
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 4000m
                  memory: 16Gi
                limits:
                  cpu: 8000m
                  memory: 32Gi
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
                allowPrivilegeEscalation: false
              env:
                - name: CONFIG_PATH
                  value: "/etc/threat-detection/config.yaml"
                - name: MODEL_OUTPUT_PATH
                  value: "/models"
                - name: ELASTICSEARCH_URL
                  valueFrom:
                    configMapKeyRef:
                      name: monitoring-config
                      key: elasticsearch_url
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/threat-detection
                  readOnly: true
                - name: ml-models
                  mountPath: /models
          volumes:
            - name: config-volume
              configMap:
                name: advanced-threat-detection-config
            - name: ml-models
              persistentVolumeClaim:
                claimName: ml-models-pvc
          restartPolicy: OnFailure

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: threat-detection-network-policy
  namespace: security
spec:
  podSelector:
    matchLabels:
      app: security-platform
      component: threat-detection
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - namespaceSelector:
            matchLabels:
              name: security
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 9200  # Elasticsearch
        - protocol: TCP
          port: 9092  # Kafka
        - protocol: TCP
          port: 8200  # Vault
