{
  "prompts": [
    {
      "id": 1,
      "prompt": "Set up a basic health check endpoint for the backend service",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "monitoring"
    },
    {
      "id": 2,
      "prompt": "Create a simple shell script to backup the database",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": false,
      "domain": "backup"
    },
    {
      "id": 3,
      "prompt": "Add environment variable validation to the backend startup script",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "configuration"
    },
    {
      "id": 4,
      "prompt": "Configure CORS settings for the backend API",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "security"
    },
    {
      "id": 5,
      "prompt": "Create a Docker compose file for local development",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "containerization"
    },
    {
      "id": 6,
      "prompt": "Set up GitHub Actions for automated testing on pull requests",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "ci/cd"
    },
    {
      "id": 7,
      "prompt": "Implement rate limiting for the API endpoints",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "security"
    },
    {
      "id": 8,
      "prompt": "Create a monitoring dashboard for application metrics using Grafana",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": false,
      "domain": "monitoring"
    },
    {
      "id": 9,
      "prompt": "Set up automated database migrations with rollback capability",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "database"
    },
    {
      "id": 10,
      "prompt": "Implement a blue-green deployment strategy for the application",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "deployment"
    },
    {
      "id": 11,
      "prompt": "Configure Nginx as a reverse proxy with SSL termination",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": false,
      "domain": "networking"
    },
    {
      "id": 12,
      "prompt": "Create a script to rotate application logs daily",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": false,
      "domain": "logging"
    },
    {
      "id": 13,
      "prompt": "Set up Redis for session management",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "caching"
    },
    {
      "id": 14,
      "prompt": "Implement API versioning strategy",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "api"
    },
    {
      "id": 15,
      "prompt": "Create a Kubernetes deployment manifest for the application",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "orchestration"
    },
    {
      "id": 16,
      "prompt": "Set up Prometheus metrics collection for the application",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "monitoring"
    },
    {
      "id": 17,
      "prompt": "Implement secrets management using HashiCorp Vault",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "security"
    },
    {
      "id": 18,
      "prompt": "Create a disaster recovery plan and runbook",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "reliability"
    },
    {
      "id": 19,
      "prompt": "Set up ELK stack for centralized logging",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "logging"
    },
    {
      "id": 20,
      "prompt": "Implement canary deployment pipeline",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "deployment"
    },
    {
      "id": 21,
      "prompt": "Add request ID tracking across microservices",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "observability"
    },
    {
      "id": 22,
      "prompt": "Create a simple status page for service health",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "monitoring"
    },
    {
      "id": 23,
      "prompt": "Set up automated security scanning in CI pipeline",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "security"
    },
    {
      "id": 24,
      "prompt": "Implement graceful shutdown for the application",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "reliability"
    },
    {
      "id": 25,
      "prompt": "Configure auto-scaling based on CPU and memory metrics",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": false,
      "domain": "scaling"
    },
    {
      "id": 26,
      "prompt": "Create a multi-stage Dockerfile for production builds",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "containerization"
    },
    {
      "id": 27,
      "prompt": "Set up distributed tracing with Jaeger",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "observability"
    },
    {
      "id": 28,
      "prompt": "Implement feature flags for gradual rollouts",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "deployment"
    },
    {
      "id": 29,
      "prompt": "Create a simple CLI tool for common DevOps tasks",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": false,
      "domain": "tooling"
    },
    {
      "id": 30,
      "prompt": "Set up GitOps workflow with ArgoCD",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "ci/cd"
    },
    {
      "id": 31,
      "prompt": "Add memory leak detection to the application",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "performance"
    },
    {
      "id": 32,
      "prompt": "Create a simple backup verification script",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": false,
      "domain": "backup"
    },
    {
      "id": 33,
      "prompt": "Implement circuit breaker pattern for external API calls",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "reliability"
    },
    {
      "id": 34,
      "prompt": "Set up cost monitoring and alerting for cloud resources",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": false,
      "domain": "cost-optimization"
    },
    {
      "id": 35,
      "prompt": "Create a dependency update automation workflow",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "maintenance"
    },
    {
      "id": 36,
      "prompt": "Implement structured logging with JSON format",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "logging"
    },
    {
      "id": 37,
      "prompt": "Set up service mesh with Istio",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "networking"
    },
    {
      "id": 38,
      "prompt": "Create a performance testing suite with k6",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": true,
      "domain": "testing"
    },
    {
      "id": 39,
      "prompt": "Implement API throttling based on user tiers",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "api"
    },
    {
      "id": 40,
      "prompt": "Set up infrastructure as code with Terraform",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "infrastructure"
    },
    {
      "id": 41,
      "prompt": "Create a simple deployment rollback mechanism",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "deployment"
    },
    {
      "id": 42,
      "prompt": "Implement webhook integration for deployment notifications",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": false,
      "domain": "notification"
    },
    {
      "id": 43,
      "prompt": "Set up database connection pooling",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "database"
    },
    {
      "id": 44,
      "prompt": "Create a chaos engineering test suite",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "testing"
    },
    {
      "id": 45,
      "prompt": "Implement OAuth2 authentication flow",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "security"
    },
    {
      "id": 46,
      "prompt": "Set up continuous security compliance scanning",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "compliance"
    },
    {
      "id": 47,
      "prompt": "Create a simple service discovery mechanism",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "networking"
    },
    {
      "id": 48,
      "prompt": "Implement lazy loading for application resources",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "performance"
    },
    {
      "id": 49,
      "prompt": "Set up multi-region deployment strategy",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "deployment"
    },
    {
      "id": 50,
      "prompt": "Create an incident response automation workflow",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "incident-management"
    },
    {
      "id": 51,
      "prompt": "Add OpenTelemetry instrumentation to the application",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": true,
      "domain": "observability"
    },
    {
      "id": 52,
      "prompt": "Set up artifact repository with Nexus or Artifactory",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": false,
      "domain": "artifact-management"
    },
    {
      "id": 53,
      "prompt": "Implement zero-downtime database migrations",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "database"
    },
    {
      "id": 54,
      "prompt": "Create a simple container registry cleanup policy",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": false,
      "domain": "maintenance"
    },
    {
      "id": 55,
      "prompt": "Set up progressive delivery with Flagger",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": false,
      "domain": "deployment"
    },
    {
      "id": 56,
      "prompt": "Implement request retry logic with exponential backoff",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "reliability"
    },
    {
      "id": 57,
      "prompt": "Create a resource usage dashboard for cost optimization",
      "complexity": "medium",
      "level": 2,
      "codebase_dependent": false,
      "domain": "cost-optimization"
    },
    {
      "id": 58,
      "prompt": "Set up automated certificate renewal with Let's Encrypt",
      "complexity": "medium",
      "level": 1,
      "codebase_dependent": false,
      "domain": "security"
    },
    {
      "id": 59,
      "prompt": "Implement distributed caching with Redis Cluster",
      "complexity": "complex",
      "level": 2,
      "codebase_dependent": true,
      "domain": "caching"
    },
    {
      "id": 60,
      "prompt": "Create a simple deployment smoke test suite",
      "complexity": "simple",
      "level": 1,
      "codebase_dependent": true,
      "domain": "testing"
    }
  ],
  "metadata": {
    "total_prompts": 60,
    "complexity_distribution": {
      "simple": 16,
      "medium": 28,
      "complex": 16
    },
    "level_distribution": {
      "level_1": 35,
      "level_2": 25
    },
    "domains": [
      "monitoring",
      "backup",
      "configuration",
      "security",
      "containerization",
      "ci/cd",
      "database",
      "deployment",
      "networking",
      "logging",
      "caching",
      "api",
      "orchestration",
      "reliability",
      "observability",
      "scaling",
      "tooling",
      "performance",
      "cost-optimization",
      "maintenance",
      "testing",
      "infrastructure",
      "notification",
      "compliance",
      "incident-management",
      "artifact-management"
    ]
  }
}